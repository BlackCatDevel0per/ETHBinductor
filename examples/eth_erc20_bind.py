from __future__ import annotations
from typing import TYPE_CHECKING
from ethbind import ETHABIBindBase
if TYPE_CHECKING:
    from typing import Any
    from ethbind.types import bytes32, uint8, uint16, uint64, uint256, address


class ERC20(ETHABIBindBase):

    def name(self) -> str:
        return self.contract.functions.name().call()

    def approve(self, _spender: address, _value: uint256, transact_params:
        dict[str, Any]) -> bool:
        return self.contract.functions.approve(_spender, _value).transact(
            transact_params)

    def totalSupply(self) -> uint256:
        return self.contract.functions.totalSupply().call()

    def transferFrom(self, _from: address, _to: address, _value: uint256,
        transact_params: dict[str, Any]) -> bool:
        return self.contract.functions.transferFrom(_from, _to, _value
            ).transact(transact_params)

    def decimals(self) -> uint8:
        return self.contract.functions.decimals().call()

    def burn(self, _value: uint256, transact_params: dict[str, Any]) -> bool:
        return self.contract.functions.burn(_value).transact(transact_params)

    def balanceOf(self, value: address) -> uint256:
        return self.contract.functions.balanceOf(value).call()

    def burnFrom(self, _from: address, _value: uint256, transact_params:
        dict[str, Any]) -> bool:
        return self.contract.functions.burnFrom(_from, _value).transact(
            transact_params)

    def symbol(self) -> str:
        return self.contract.functions.symbol().call()

    def transfer(self, _to: address, _value: uint256, transact_params:
        dict[str, Any]) ->None:
        return self.contract.functions.transfer(_to, _value).transact(
            transact_params)

    def approveAndCall(self, _spender: address, _value: uint256, _extraData:
        str, transact_params: dict[str, Any]) -> bool:
        return self.contract.functions.approveAndCall(_spender, _value,
            _extraData).transact(transact_params)

    def allowance(self, value_0: address, value_1: address) -> uint256:
        return self.contract.functions.allowance(value_0, value_1).call()

# Generated by ETHBinductor: https://github.com/BlackCatDevel0per/ETHBinductor
